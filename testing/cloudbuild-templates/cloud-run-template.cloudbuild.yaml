steps:

- id: 'Build Container Image'
  name: 'gcr.io/cloud-builders/docker:latest'
  dir: '${_SAMPLE_DIR}'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}', '.'] # Tag docker image with git commit sha

- id: 'Push Container Image'
  name: 'gcr.io/cloud-builders/docker:latest'
  args: ['push', 'gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}']

- id: 'Deploy to Cloud Run'
  name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
  entrypoint: /bin/bash
  args:
  - '-c'
  - | # Cloud Run Service name must be less than 63 characters
    cat /dev/urandom | LC_CTYPE=C tr -dc 'a-z0-9' | head -c 15 > _short_id # Generate a random 15 character alphanumeric string (lowercase only)
    gcloud run deploy ${_SERVICE}-$(cat _short_id) \
      --image gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA} \
      --no-allow-unauthenticated \
      --region ${_SERVICE_REGION} \
      --platform managed

- id: 'Get Cloud Run URL'
  name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
  entrypoint: '/bin/bash'
  args:
  - '-c'
  - |
    set -e
    get_url() {
        gcloud run services describe ${_SERVICE}-$(cat _short_id) --format 'value(status.url)' \
          --platform managed --region ${_SERVICE_REGION}
    }
    echo $(get_url) > _service_url
    echo "Cloud Run URL for ${_SERVICE}-$(cat _short_id) is $(cat _service_url)"

    # Cloud Build does not natively mint identity tokens.
    # A separate mechanism is preloading into Secret Manager
    # credentials for a service account which can mint tokens.
    gcloud secrets versions access latest --secret ${_SECRET_NAME} > _sa_key.json
    # Capture the current authenticated account.
    account=$(gcloud config get-value account)
    gcloud auth activate-service-account ${_RUNNER_IDENTITY} --key-file _sa_key.json --project ${PROJECT_ID}
    gcloud auth print-identity-token --audiences "$(cat _service_url)" > _id_token
    # Switch to the original account.
    gcloud config set account ${account}
    rm _sa_key.json

- id: 'Integration Tests'
  # TODO: Update the following image name, entrypoint, and args to fit your testing needs
  name: 'gcr.io/cloud-builders/curl'
  entrypoint: '/bin/sh'
  dir: '${_SAMPLE_DIR}'
  args:
  - '-c'
  - |
    set -e
    curl -si -H "Authorization: Bearer $(cat _id_token)" $(cat _service_url)

- id: 'Teardown'
  name: 'gcr.io/cloud-builders/gcloud:$_CLOUDSDK_VERSION'
  entrypoint: '/bin/bash'
  args:
  - '-c'
  - |
    set -x
    gcloud --quiet container images delete gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}
    gcloud --quiet run services delete ${_SERVICE}-$(cat _short_id) --region ${_SERVICE_REGION} --platform managed
    set +x
    echo "View build details in the console: https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}"

# Uncomment if skipping teardown to associate build with container image.
# images:
# - 'gcr.io/${PROJECT_ID}/${_SERVICE}:${SHORT_SHA}'

# TODO: Update these User-defined substitutions
substitutions:
  _SERVICE: SERVICE_NAME
  _SAMPLE_DIR: SAMPLE_DIRECTORY
  _SERVICE_REGION: us-central1
  _CLOUDSDK_VERSION: latest
